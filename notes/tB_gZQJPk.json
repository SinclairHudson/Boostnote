{"title":"L6: Condition Variables","content":"\n## OS OF THE DAY\n\nDTSS\n\nDartmouth Time Sharing System.\n\n* Operational until the end of 1999.\n* First IDE.\n* Every action should take no more than 10 seconds to respond (pre-emption)\n\nSemaphores is like a multi-core lock. Because CPUs can handle many threads now.\n\n![](image-kkgyvrpc.png)\n\n![](image-kkgyzb0b.png)\n\n![](image-kkgz27oo.png)\n\n![](image-kkgz7cjw.png)\n\nThread 1 might sleep forever. We can't let it sleep on a resource that is available!\n\n![](image-kkgz957m.png)\nTypo in the last line\n\n\n![](image-kkgzbfe9.png)\n\nRelease the lock and fall asleep. Then another process modifies it, and then wakes you up.\n\nAllows us to fall asleep in a critical section.\n\nThis is called a Condition Variable!\n\nhttps://pages.cs.wisc.edu/~remzi/OSTEP/threads-cv.pdf\n\n![](image-kkgzgyzc.png)\n\n![](image-kkgziwdp.png)\n\nThe problem is we're actively spinning.\n\n![](image-kkgzn9vw.png)\n\n![](image-kkh019ns.png)\n\nNeed to own lock in cv_wait. Need to check ownership too.\n\n![](image-kkh0cprr.png)\n\nWe're not spinning now!\n\nActually, spinlocks, condition variables, and semaphors can all solve the same problems; they're just different constructions to solve race conditions and such.\n\nCheck out \"Semaphores to CVs\" practice problem to see that you can mimic the behaviour exactly.","tags":[],"folderPathname":"/CS350","data":{},"createdAt":"2021-01-28T14:29:36.302Z","updatedAt":"2021-02-07T16:23:40.642Z","trashed":false,"_id":"note:tB_gZQJPk","_rev":"43-641503ec478949235df6a83a5511f8ca"}