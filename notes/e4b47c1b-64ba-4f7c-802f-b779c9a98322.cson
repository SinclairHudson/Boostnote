createdAt: "2019-11-26T15:11:45.932Z"
updatedAt: "2019-11-26T15:34:44.179Z"
type: "MARKDOWN_NOTE"
folder: "13f1477d1dab07e879ca"
title: "Problem 26: Collecting Stats"
tags: []
content: '''
  ## Problem 26: Collecting Stats
  
  How many students do I have? We want a field that transcends the class. We want a static field.
  
  ```cpp
  class Student{
    int assns, mt, final;
    static int count; //static means associated with the class, not one per object
    
    public:
      Student(~~~~~~){++count;}
      
      //accessors
      static int getCount(){return count;} //static method - no 'this' pointer. not really a method, just a scoped function.
  }
  ```
  So what does create that static field? The programmer of course.
  ```cpp
  int Student::count = 0; //must define the variable
  
  Student s1{~~~~~}, s2{~~~~~~~};
  
  cout << Student::getCount() << endl; //2
  ```
  
  Now I want to count objects in other classes.
  
  ```cpp
  template<typename T> class Count{
    static int count;
    Count(){++count;}
    Count(const Count &){++count;}
    ~Count(){--count;}
    static int getCount(){return count;}
  };
  
  template<typename T> int Count<T>::count = 0;
  ```
  And the way we can use this class is by inheriting from it. Big brain.
  
  ```cpp
  class Student:Count<Student>{ //private inheritance
  int assns, mt, final;
  public:
    Student(~~~~~~):~~~~~~~{}
    ~~~~~
    using Count::getCount; //make Count::getCOunt visible.
  }
  ```
  This will inherit COunt's implementation, without creating an "is a" relationship. Members of Count become private in Student. 
  
  We can do the same thing for other classes now too.
  
  But why is count a template? - So we're not mixing different types. We need a Count class for Books, one for Student, etc. This gives each class its own counter, versus sharing one counter over all classes.  
  
  This technique - inheriting from a template specialized by yourself - is called **the Curiously Recurring Template Pattern (CRTP)**. Good name.
'''
linesHighlighted: []
isStarred: false
isTrashed: false
