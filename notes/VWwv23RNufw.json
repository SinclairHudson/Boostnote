{"_id":"note:VWwv23RNufw","title":"Problem 10: Vector of chars","content":"## Problem 10: Vector of chars\n\nDo we start over? no. \nWe introduce a major abstraction mechanism - **template** - which generalize over types.\n```cpp\nnamespace CS246E{\n  template<typename T> class vector{\n    T *theVector;\n    size_t n, cap;\n    public:\n      vector();\n      ...\n      void push_back(T n);\n      T &operator[](size_t i);\n      const T &operator[](size_t i) const;\n      typedef T *iterator;\n      typedef const T *const_iterator;\n  };\n  template <typename T> vector<T>::vector():n{0},cap{1},\n    theVector{new T[cap]}{}\n  template <typename T> vector<T>::push_back(T n){...}\n  //etc\n}\n```\n\nWhen it comes to templates, **you must put implementation in .h file**.\n\nThe first time the compiler encounters `vector<int>`, it creates a version of the code for vector, where int replaces T, and compiles that new class. So it has to be in the same file.\n","tags":[],"folderPathname":"/CS246E","data":{},"createdAt":"2019-10-01T15:07:53.128Z","updatedAt":"2019-12-05T01:43:24.001Z","trashed":false,"_rev":"uefB25cDAp6"}