{"_id":"note:vH6zSg_aMqH","title":"Problem 28: Polymorphic Cloning","content":"## Problem 28: Polymorphic Cloning\n\n```cpp\nBook *pb1 = ~~~~~~~;\n\nBook *pb2 = // I want an exact copy of *pb1. but I don't know which constructor to call.\n```\nCan't call a constructor directly - don't know what *pb1 is, so I don't know which constructor to call.\n\nStandard solution: virtual `clone` method; known as the **\n## incomplete\n\n## incomplete\n\n```cpp\ntemplate<typename T, typename Data> class Logger{\n  public:\n    void loggedSet(Data x){\n      cout << \"Setting x to \"<< x << endl;\n      static_cast<T*>(this)->set(x);\n    }\n};\n\nclass Box: public Logger<Box, int>{\n  friend class Logger;\n  int x;\n  void set(int y){x=y;}\n  ...\n};\n\nclass Box{\n  int x;\n  public:\n    void set(int y){x=y;}\n};\ntemplate<typename T,typename Data> class Logger: public T{\n  public:\n  void loggedSet(Data x){\n    cout << \"Setting x to \"<< x << endl;\n    set(x);\n  }\n};\n\nusing BoxLogger = Logger<Box,int>;\nBox Logger b;\nb.loggedSet(1);\nb.loggedSet(4);\nb.loggedSet(7);\n\n```\n\nIf SpecialBox is a subclass of Box, then Logger<Box, int> is not a subclass of SPecialBox under the second solution. Also, Logger<SpecialBox, int> is not a subtype of Logger<Box,int>\n\nBut in the first solution, SpecialBox is a subtype of Logger<Box,int> => can specialize virtual behaviour.","tags":[],"folderPathname":"/CS246E","data":{},"createdAt":"2019-11-26T15:52:54.240Z","updatedAt":"2019-11-27T17:36:57.010Z","trashed":false,"_rev":"QOdMLPX2JT9"}