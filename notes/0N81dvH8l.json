{"title":"Algorithms","content":"# Algorithms\n\nWe're concerned with finding the best algorithmic solutions to problems.\n\n1. How to design algs\n2. How to analyze algorithms\n3. Lower bounds (Do we have the best alg?)\n4. NP-completeness and undecidability\n\nSome paradigms we'll encounter in this course:\n\ndivide an conquer, greedy, dynamic programming, reductions\n\n## Case study: Convex hull\n\n![](image-kjvmyrmu.png)\n\nEquivalently, in a more mathematical description:\n\n![](image-kjvn0v7f.png)\n\nStraightforward, brute force approach:\n1. Find all pairs of points\n2. Find the line through every pair\n3. See if all the other points lie on one side or the other (How?)\n4. Include or exclude that line segment.\n\nWe can check if all points $t$ are on one side by this $S$.\n![](image-kjvn64jw.png)\n\nBut this is $O(n^3)$, and we can do better.\n\n![](image-kjvn81r9.png)\n\nBut we can do even better! We can use a **reduction** that uses sorting.\n\n![](image-kjvncow4.png)\n\nThe solution to this problem involves traversing the red line and looking at the angles it creates with itself. The top and bottom boundaries are found individually. This alg is actually $O(n\\log n)$, dominated by sorting the x coordinate.\n\n![](image-kjvngqkd.png)\n\n![](image-kjvq8my3.png)\n\nAnd we can even reduce *sorting* into a convex hull problem :joy:. This assumes that we can square the elements that we want to sort, so technically it's not a comparison sort anymore. We have another assumption. Timothy Chan's \"output sensitive convex hull alg\" is $O(n\\log h)$ for sorting.","tags":[],"folderPathname":"/CS341","data":{},"createdAt":"2021-01-13T16:20:59.270Z","updatedAt":"2021-01-13T18:00:54.166Z","trashed":false,"_id":"note:0N81dvH8l","_rev":"38-3dc9a4538818fd36d9698b9c52ad88c3"}