{"_id":"note:hLdbEy62CPk","title":"Problem 20: I want a class with no objects","content":"## Problem 20: I want a class with no objects\n```cpp\nclass Student{\n  public:\n    virtual float fees() const;\n};\n\nclass RegularStudent: public Student{\n  public:\n    float fees() const override; //regular student fees\n};\n\nclass CoopStudent: public Student{\n  public:\n    float fees() const override; //co-op student fees\n};\n```\n\nWhat should Student::fees do?\nDon't know - every student should be Regular or Co-op.\n\nThe solution is to explicitly give Student::fees no implementation.\n```cpp\nclass Student{\n  public:\n    virtual float fees() const = 0; //garbage language design but ok\n    //this is a pure virtual method\n};\n```\nA class that contains at least one **pure virtual method** is called an **abstract class**. Because you can't make an object with it. Abstract classes cannot be instantiated.\n`Student s;` will not compile.\n`Student *s = new Student;` will also not compile.\n`Student *s = new Regular Student;`\n\nSubclasses of abstract classes are abstract, unless they implement all pure virtual methods.\nAbstract Classes:\n* used to organize concrete classes\n* can contain common fields, methods, default implementations\n","tags":[],"folderPathname":"/imported/CS246E","data":{},"createdAt":"2019-10-29T14:17:52.671Z","updatedAt":"2019-10-29T15:42:57.533Z","trashed":true,"_rev":"OYDiAiQYuUi"}