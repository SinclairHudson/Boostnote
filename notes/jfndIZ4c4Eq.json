{"_id":"note:jfndIZ4c4Eq","title":"Tutorial 8: Because the assignment","content":"## Tutorial 8: Because the assignment\n\nWhat is parsing? \nString to data structure, possibly a tree\n\n### Recursive Descent\n* Language is a set of strings\n* every string in that set is also known as a word in that language\n* a word is made up of symbols\n* the grammar is a set of rules expressing organization and placement of symbols such that they form valid words in the language\n\nExample:\nA rational number is any of\n* A natural number\n* Two natural numbers seperated by a \".\"\n* A natural number, followed by a \".\", followed by infinitely many copies of a natural number\n\nA parse tree is a proof that a word is in a language.\n\nAn abstract syntax tree is the exact same thing except the syntactic nodes are removed. Things like brackets. Of course, no tree is required to be a binary tree.\n\nWe need precedence and associativity.\n\nright associative: a + b + c === a + (b + c)\nleft associative: a + b + c === (a + b) + c\n\nWe have another language, right associative and binary:\nA word in L is any of \n* A variable, represented by a single lowercase letter of the english alphabet\n* a OR b, where a,b are word in L where a has no ORs in it\n* a AND b, where a,b are words in L, and a has no ORs or ANDs in it. \n\nWe'll code this example\n```cpp\nclass Expr{\n  public:\n  class OR;\n  class AND;\n  class variable;\n}\n```\nView the images from the board, this would be a pain to type out.\n\n","tags":[],"folderPathname":"/imported/CS246E","data":{},"createdAt":"2019-10-30T16:29:55.523Z","updatedAt":"2021-02-12T21:14:28.128Z","trashed":true,"_rev":"JMLS7UBM0W4"}