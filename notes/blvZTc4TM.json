{"_id":"note:blvZTc4TM","title":"Public Key cryptography","content":"## Public Key Cryptography\n\n### Drawbacks of SKES\n\nWell, we need a secure channel to pass the key.\n\n![](image-klb90tx8.png)\n\nHow do we establish this secure channel?\n\nThis is called the **key establishment problem**.\n\n### Method 1: Point to point key distribution\n\nA secure channel might be a courier, a face-to-face meeting, or a SIM card or something.\n\nThey're not practical for large-scale applications.\n\n\n### Method 2: Use a Trusted Third Party (TTP) $T$.\n\n![](image-klb95apu.png)\n\nBut there are drawbacks. the TTP must be trusted, and it's a verry juicy target.\n\nif ttp goes down, alice can't talk to bob.\n\n---\n\n\n## Key Management Problem\n\n![](image-klb96sn1.png)\n\nReally annoying to manage keys for all my 3 friends.\n\n\n### Non-Repudiation is Impractical\n\n![](image-klb97mg8.png)\n\nThe thing is, Bob can forge a message from Alice, because they share a key with SKES.\n\n\nThese drawbacks can be aleviated to some degree, but pub key (asymmetric) is better.\n\n## Public Key Cryptography\n\nThe difference is that instead of a secure channel, we just need an **authenticated channel**. We send the public keys over the authenticated channel, and we ensure that the key came from Bob.\n\n![](image-klb9c14m.png)\n\nInvented by Ralph Merkle, Witfield Diffie, Martin Hellman in 1975.\n![](image-klb9d6rt.png)\n\nStory is kind of crazy.\n\n![](image-klb9q4zs.png)\n\nChad Merkle does a project in his undergrad for a security course. Prof doesn't understand, asks him to re-write the proposal twice. He drops the course, and works on it on his own. He submits a paper to a conference, but it's rejected, because they didn't understand.\n\n![](image-klb9slcb.png)\n\nMerkle illustrated his ideas in a \"puzzle format\":\n\n![](image-klb9ws79.png)\n\n![](image-klb9xtaj.png)\n\n---\n\nDetails about pub-key crypto:\n\nEach entity has to generate a key pair $(P_A, S_A)$. $P$ is public, $S$ is secret.\n\nIt should be infeasible for an adversary to recover $S_A$ from $P_A$.\n\n![](image-klba0isi.png)\n\n![](image-klba1q5d.png)\n\nSo your recipient's pub key to encrypt, and then they use their private key to decrypt.\nYou can see why it's required to have authentication.\nIf Alice encrypts the message with Eve's public key instead of bob's, then eve can simply decrypt the message with no issue. Bob wouldn't be able to decrypt.\n\n![](image-klba75vw.png)\n\n\nWe can also use pub-key crypto to create digital signatures:\n\n![](image-klba8e9d.png)\n\nCritically, signatures are message-dependent. Of course. also, authenticated channels are required, for the same reasons as pub-key encryption.\n\nThe cool thing about signatures in this way is that _anyone_ can verify that the message came from the sender; everyone has Alice's public key.\n\nDigital signatures are widely used to sign software updates.\n\n\n### Advantages of pub key\n\n* No requirement for secured channel\n* Each user has only 1 key pair\n* A signed message can be verified by anyone\n* Facilitates the provision of non-repudiation services (with digital signatures)\n\n### Disadvantages of pub key\n\n* much slower than skes\n\nso often, **hybrids schemes** are used in practice.\n\nEncrypt the SKES secret key with pub key cryptography, encrypt the message with AES with the SKES secret key, and then send both ciphertexts on the unsecured channel.\n\n![](image-klbag4nr.png)\n\nAES is fast, so most of the package is AES. The key to said AES is pub-key encrypted.\nWe get the best of both worlds!\n","tags":[],"folderPathname":"/CO487","data":{},"createdAt":"2021-02-18T19:11:11.959Z","updatedAt":"2021-02-18T20:01:22.535Z","trashed":false,"_rev":"zrcM1rUEs"}