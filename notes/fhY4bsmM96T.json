{"_id":"note:fhY4bsmM96T","title":"Problem 21: The goddamn copier is broken again","content":"## Problem 21: The goddamn copier is broken again\n\nHow do copies + moves interact with inheritance?\n\nCopy constructor: `Text::Text(const Text &other): Book {other}, topic{other.topic}{}`\nMove constructor: `Text::Text(Text&&other): Book{std::move(other)},topic{std::move(other.topic)}{}`\nCopy assignment:\n```cpp\nText &Text::operator=(const Text &other){\n  Book::operator=(other);\n  topic=other.topic;\n}\n```\nMove Assignment:\n```cpp\nText &Text::operator=(Text &&other){\n  Book::operator=(std::move(other));\n  topic=std::move(other.topic);\n}\n```\n\nBut consider:\n```cpp\n  Book *b1 = new Text{......}, *b2 = new Text{ ..... };\n  *b1=*b2; //only the book part got copied, not the Text part\n```\nOnly the book part is copied. this is a **partial assignment**.\nThe topic doesn't match the title and the author, the object is corrupted.\nPossible solution: Make `operator=` virtual.\n\n```cpp\nclass Book{\n  public:\n  virtual Book &operator=(const Book &other){ .....}\n};\n\nclass Text: public Book{\n  public:               //Would have to be Book or it's not an override.\n  Text &operator=(const Text &other) override{...}\n}\n```\n\nAnd this won't compile. These aren't the same method.\nSo it has to be like this:\n```cpp\nclass Text: public Book{\n  public:               \n  Text &operator=(const Book &other) override{...}\n}\n```\nBut then we can pass something like a comic and have it converted into a text...?\nWe'll come back to this in a little bit.\n\nAnother solution:\nMake all superclasses **abstract**:\n\n@startuml\nabstract class Book\nBook <|-- Text\nBook <|-- Comic\n\n@enduml\n\n---\n```cpp\nclass AbstractBook{\n  protected:\n    AbstractBook &operator=(const AbstractBook &other){...} //non-virtual\n    virtual ~AbstractBook()=0; //you must give this destructor an implementation.\n    .....\n};\n\nclass Text:publicAbstractBook{\n  public:\n  Text &operator=(const Text &other){\n    AbstractBook::operator=(other);\n    topic = other.topic;\n  }\n};\n```\nso now, `operator=` is non-virtual, so there's no mixed assignment.\n`AbstractBook::operator=` not accessible to outsiders, `*b1=*b2` won't even compile now. No partial assignment.\n","tags":[],"folderPathname":"/imported/CS246E","data":{},"createdAt":"2019-10-29T14:40:44.015Z","updatedAt":"2019-12-05T21:35:01.867Z","trashed":true,"_rev":"E8tDBx79Z79"}