{"title":"One Time pad and stream ciphers","content":"# One-time pad, stream ciphers, RC4\n\nThere are two-types of symmetric-key ciphers:\n1. Stream ciphers (encodes each bit or byte inidividually in succession)\n2. Block ciphers (splits plaintext into uniform blocks,then performs encryption one block at a time.)\n\n\n### One-Time PAD\n\n![](image-kjx1uvhy.png)\n\nImpractical, because the keys are super long and it's unwise to re-use the keys.\n\n\n:::note Convention\nFrom here  on, unless otherwise stated, messages and keys will be assumed to be **bit strings**.\n:::\n\nXOR is important.\n\n![](image-kjx1yz37.png)\n\n\nRe-using a key is a bad idea:\n\n![](image-kjx20uot.png)\n\nIn this example, black pixels are 1 and white is 0.\n\nTechnically though, a one-time pad has **perfect secrecy**. It's semantically secure against ciphertext-only attacks by an adversary with infinite compute.\n\nbut the secret key must be as long as the plaintext, which is really inefficient. Useless in practice. If you have a secure channel over which to send the secret key, just send the plaintext :joy:.\n\nBut we can use these concepts in stream ciphers.\n\nInstead of using a random key in the one-time pad, use a \"pseudorandom\" key. It _looks_ random, it's deterministically found by using a **seed**. The seed is a secret key shared by alice and bob.\n\n![](image-kjx2ix7f.png)\n\nThe secrecy is no longer perfect; it depends on the PRBG (pseudorandom bit generator).\n\nThere are two security requirements for the PRBG:\n\n1. A keystream should be indistinguishable from a random sequence\n2. If an adversary knows a portion of ciphertext $c$. and the corresponding plaintext $m$, then they can have $k=c \\oplus m$. So it's critical that it's infeasible to learn any more information about the rest of the keystream.\n\n:::note aside\nDon't use UNIX random number generators! They rely on fixed and public constants.\nThey don't meet the unpredicability requirement.\n:::\n\nThe issue remains that we can't re-use the same keystream (or the same seed for that matter). You can use further portions of the same keystream.\n\n## RC4 Stream Cipher\n\nuntil recently, RC4 was used.\n\nPros:\nSimple and fast, no huge weaknesses (recently we found weaknesses though)\n\nCons:\nDesign criteria are proprietary\n\nRC4 has two components:\n1. key scheduling alg\n2. keystream generator\n\n![](image-kjx2wo53.png)\n\n![](image-kjx2y7dl.png)\n\n","tags":[],"folderPathname":"/CO487","data":{},"createdAt":"2021-01-14T16:06:40.115Z","updatedAt":"2021-01-28T15:59:14.532Z","trashed":false,"_id":"note:pPc3WLEc2","_rev":"60-beabce2bdf50730e08406789c5da7984"}