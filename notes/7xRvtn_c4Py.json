{"_id":"note:7xRvtn_c4Py","title":"Week 9: More Pipelining","content":"# Week 9: More Pipelining\n\n\nRemember, forwarding.\n\n![0376b043.png](0376b043-kl2ssw8e.png)\n\nForwarding unit checks all the conditions to make sure we're forwarding correctly.\n\n!!! danger Load Word Hazard\nWhen LDUR is followed immediately by an instruction that uses LDURs destination Register. We use a single NOP to fix this hazard.\n!!!\n\n---\n\nWhat about, instead of NOPs, we just rearrange the code...? Restructure the code. That's called **Code Rearrangement**. \n\nThere are obvious guidelines with code rearrangment. Don't swap liens with data dependencies,\nand don't move inside or outside of loops.\n\nWhen computing execution time, we have to factor in pipeline startup time. This is 4 clock cycles, because we begin producing completed instructions after 4 clock cycles. After that, we produce one completed instruction per clock cycle.\n\n\nWhen you need to add a NOP, you can actually do that in the hardware, and not the compiler.\nWe can add a **Hazard Detection Unit** to the data path, which takes the RN and Rm from the IF/ID intermediate register. It also gets ID/EX Memread, to check if there's a hazard. Implementation is fairly simple:\n1. Zero out Control Bits - Converts instruction into NOP\n2. But also block  IF/ID and PC from updating, so it doesn't skip anything.","tags":[],"folderPathname":"/imported/CS251 Week 9","data":{},"createdAt":"2020-07-06T15:27:20.216Z","updatedAt":"2020-07-06T16:39:26.960Z","trashed":true,"_rev":"CH_Ykw4Z9au"}