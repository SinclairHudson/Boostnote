{"_id":"note:lLtwKjMFMpG","title":"Week 10: Memory Hierarchies","content":"# Week 10: Memory Hierarchies\n\nSo far we've just seen the cache, which has instruction memory and data memory. These are separate from Registers.\n\nThen there's RAM. For a large program, RAM loads code from the disk to the RAM, so that when the caches need it they only have to go to RAM. It fetches page by page, so it can actually execute really large programs.\n\nThe RAM is partitioned based on programs. Every program thinks its start address is address 0x0. They are independent. A page includes both code an data. The code gets moved to the IM cache, and Data goes to the DM cache. Both are stored in the L1 cache.\n\nPreviously, we had the illusion of unlimited IM and DM. Now, we need to actually implement that, where everything is actually finite.\n\n!!! abstract Principle of Locality\nTemporal Locality: If one data location is referenced once, then it will tend to be referenced again soon.\n\nSpatial Locality: It one data location is referenced, that data locations with nearby addresses will also tend to be referenced soon. This is highly relevant for code.\n!!!\n\n$\\text{Clock Rate} = \\frac{1}{\\text{time of one clock cycle}}$\nIf the cc takes 250 ps, that's 4GHz (pretty fast processor).\n\n## The speed heirarchy:\n1. Register File\n2. Caches (L1, L2, IM, DM) SRAM\n3. Main Memory (RAM) DRAM\n4. Disk Drive (or SSD)\n\nRemember, SRAM uses more transistors (6 transistors), DRAM just uses one transistor and a capacitor, but the cap has to be recharged all the time. It's for the reason that DRAM is slower but cheaper than SRAM.\n\n---\n\nInsruction cache miss - the next value of PC isn't really in the cache. We have to fetch. The cost or \"penalty\" is 100cc or something. How do we place the memory in the cache when we fetch it?\n\nSo we need some sort of mapping strategy.\n\n### Direct Mapping\n\n![a7caf28a.png](a7caf28a-kl2t9512.png)\n\nUse the lower bits of the memory address, which are called **index bits**, of the address to hash instructions into the index of the cache.\nWe also have to store the higher bits of the memory address with the instruction into the cache, called the **tag bits**, because the mapping is many to one.\n\nWe have tables for this data. There's no chaining; so if you ask for two memory entries back to back, and they hash to the same cache slot, you're going to have to do a trip to memory on the second one for sure. The first one might already be there, but when you fetch you overwrite that position in the cache. You use the tag bits to make sure it's the correct instruction.\n\nThe cache is not pre-populated: we let cache misses populate the cache. That's why sequential operations are faster than the first one.\n\n![b7177485.png](b7177485-kl2t9512.png)\n\nThis is called a \"One way associative cache\".\n\nHere's a 64 bit example:\n\n![fb681cbc.png](fb681cbc-kl2t9513.png)\n\nWe need a byte offset of 2 bits because the lower order bits are always 00, since they're multiples of 4.\n\nThe number of index bits is determined by the size of the cache. You need enough to specify all the rows in your cache. You should have $n$ index bits and $2^n$ cache rows.\n\n---\n\n### 2-way set associative cache\n\nLike chaining in hash tables, but fixed lengths:\n![53e85299.png](53e85299-kl2t9511.png)\n\nWhen we increase the number of columns, we're trying to increase the number of cache hits. The lookup time remains the same but hardware increases.\n\n4-way associative exists. If our cache size is only 8, then we only have 2 rows and thus 1 index bit. We will need more tag bits though, to give more detail on who is living in what column. The columns are not indexed by the tag bits, just an FYI.\n\n![d27d446f.png](d27d446f-kl2t9512.png)\n\n![19a73b0d.png](19a73b0d-kl2t9511.png)\n\nFinally, we have 8-way associative cache.\nWe only have 1 row (assuming we have 8 entries), so we don't even need an index bit. We call this type of cache **fully associative**. However, we need to store the whole address as the tag bits.\n\n![9a65ba3b.png](9a65ba3b-kl2t9512.png)\n\nWhen we kick anything out of a full cache, we want to kick out the oldest one, because we assume it's the least likely occur again soon. We got through the **history of requests, not misses**.\n\n![0fa37cfc.png](0fa37cfc-kl2t9511.png)\n\nAnswer is 18. Be sure to not double-count addresses.\n\n---\n\n### Chunks\n\nInstead of fetching a single instruction when we miss, why not bring a chunk? It should hopefully save us a bit of time.\n\nWe're going to fetch from ram at 1 block = 64 bits per fetch. That equates to 2 instructions. If we had a block size of 128 bits, it would be 4 instructions per block.\n\nWhen we increase the block size, the time required to fetch the block from ram increases. So if RAM access time is 100cc, 104cc is required to bring in a block of 4 words, 108cc to bring a block of 8 words.\n\nRemember, the word size in Data cache is 64 bits (8 bytes). We'll call this a double word. Instructions are just 32 bits, a single word.\n\nBlocks are, of course, consecutive.\n\nWe can treat indexes as Tag bits, Index bits, Block bits, and Byte bits. We split it up so that we know which index to look in, and then what block, etc.\nThe byte bits (lowest 3) are all 0, because all the addresses are multiples of 8.\n\nWith this system, when we have a cache miss, we fetch the 4 8-byte data points, and then store them in the cache. Critically, **we do not split up blocks**. So if the last index in a block is requested, you actually grab that one and the previous 3 and return them to the cache. If you request the index that begins a new block, then you also grab the next 3.\nThis is called **block alignment**.\n\n![830ab08e.png](830ab08e-kl2t9512.png)\n\nThe above code, assuming no hazards, takes 4cc + 104cc = 108 cc. 4cc for 4 instructions and 104cc for that RAM fetch.\n\nIf we increased the block size, we should have more columns in the Cache, and we need more block bits. We'd take one from the index bit and move it to a block bit.\nNow, if we maintained the number of rows in our cache, we'll still need the same number of index bits. So we steal the lowest tag bit and it becomes an index bit.\n\nWhen you get a collision, you have to overwrite the whole block.\n\n![d3b29014.png](d3b29014-kl2t9512.png)\n\n!!! note STUR\nWe've talked about reading, but what about writing?\nWe can modify the cached value, but the parent doesn't get modified. We need to indicate that we've modified a cache value. We do this via a **dirty bit**, which is one bit per block. If the dirty bit is 1, that means that something in that block has been modified, and it needs to be updated in RAM. Then, when that block gets kicked out of the cache, only then will we update it.\n!!!\n\n#### Write Back\n\nWhen the block gets kicked from the cache, update it if it's been modified. This will cost you 104cc. There's also **write-through**, which updates RAM immediately.\n\nSo when you get a collision miss in the cache table, and the block is modified, it's going to cost you 104cc to WB and 104cc to fetch the next block.\n\n---\n\nWe can combine this idea of blocking with 2-Way associativity, and now we're cooking with gas. There's room for more.\n\nAverage Memory access time is = time for a hit + miss rate $\\times$ miss penalty","tags":[],"folderPathname":"/CS251","data":{},"createdAt":"2020-07-14T14:59:08.027Z","updatedAt":"2020-08-14T19:17:23.779Z","trashed":false,"_rev":"jLsHXKc5Cxp"}