{"title":"L09: ","content":"### OS of the day\n\n![](image-kky3wgby.png)\n\npipes! device agnostic!\nUnix was very popular, and it was important as a stepping stone for a TON of modern operating systems.\n\n## How do we interact with the kernel?\n\n![](image-kky487qi.png)\n\n![](image-kky495qc.png)\n\n![](image-kky4adp4.png)\n\nThe processor is switched to a priviliged mode.\n\nEverything in MIPS is an exception.\n\n![](image-kky4bhlq.png)\n\n![](image-kky4fl35.png)\n\nWe use register `v0` to tell the kernel which system call we want.\n```\nli $v0, syscall code\n```\n\nAnd the syscall code is found in `kern/include/kern/syscall.h`  for OS161. They're just defined constants as they are in C.\n\n`fork` is system call code 0.\n\nthe syscall library is the bare minimum interface for user programs to interact with user programs. But we also need a way to pass params...\n\nregisters `a0` through `a3` are **reserved for syscall args**. If you need more args, then you send a pointer to an array in memory.\n\n\nWhat about what the kernel returns from an exception? The kernel returns something back after the fork. We return something in `$v0`, and also `$a3`.\n`$v0` will have the return value or the error code. Which one? `$a3` contains either success (as 0), or fail (as 1). \nAnd that's how you would know.\n\n### Okay, but what happens in the kernel?\n\n![](image-kky4t4sy.png)\n\nyou have to compile kernel and the standard C library with architecture flags. That is, architecture is a compile-time choice. Different implementations will be activated based on the architecture you choose.\n\n![](image-kky5327n.png)\n\nEvery process has two stacks! Because we need a priviliged stack to avoid security breach. Also dodges overflow.\n\nWhen interrupts occur, interrupts are turned off until we figure out what interupt we got. Afterwards, we may or may not turn interrupts back on.\nDepends on the severity of the interrupt.\n\nWhen returning, we modify the trap frame. So that, when the trap frame gets put back into the CPU, the return values are in the registers that they should be.\nWe also manually advance the program counter.\n\nRemember, system calls are quite expensive. `malloc` _can_ be a system call.\nOptimizations are important. You can print a value 1000 times, or you can save a buffer with the value 1000 times, and then print it once. The latter is much faster, because fewer sys calls. \n\n![](image-kky5heuf.png)\n\nProcesses don't run, threads run.\n\n\n\nHere comes a long example\n\n\n![](image-kky5rhv5.png)\n\n\n\n\n![](image-kky5i3bl.png)","tags":[],"folderPathname":"/CS350","data":{},"createdAt":"2021-02-09T14:31:08.512Z","updatedAt":"2021-02-09T15:27:45.048Z","trashed":false,"_id":"note:GhlsigM1C","_rev":"67-2931139ff76c1df0dd8524887096ff62"}